-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\chorus_try10sin\double_chorus.vhd
-- Created: 2021-04-19 22:46:32
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: double_chorus
-- Source Path: chorus_try10sin/dataplane/double_chorus
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY double_chorus IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        input_signal                      :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        delay_samples                     :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        echo_gain                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En15
        delay_samples2                    :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        output_signal                     :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
        );
END double_chorus;


ARCHITECTURE rtl OF double_chorus IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT NCO_HDL_Optimized2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          inc                             :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          validIn                         :   IN    std_logic;
          sine                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT circular_buffer_delay1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          signal_in                       :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          delay                           :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          signal_out                      :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
          );
  END COMPONENT;

  COMPONENT NCO_HDL_Optimized1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          inc                             :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          validIn                         :   IN    std_logic;
          sine                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT circular_buffer_delay
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          signal_in                       :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          delay                           :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          signal_out                      :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
          );
  END COMPONENT;

  -- Component Configuration Statements
--   FOR ALL : NCO_HDL_Optimized2
--     USE ENTITY work.NCO_HDL_Optimized2(rtl);

--   FOR ALL : circular_buffer_delay1
--     USE ENTITY work.circular_buffer_delay1(rtl);

--   FOR ALL : NCO_HDL_Optimized1
--     USE ENTITY work.NCO_HDL_Optimized1(rtl);

--   FOR ALL : circular_buffer_delay
--     USE ENTITY work.circular_buffer_delay(rtl);

  -- Signals
  SIGNAL offset_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL slope_out1                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL slope_out1_1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL sin1_en_out1                     : std_logic;
  SIGNAL NCO_HDL_Optimized2_out1          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_HDL_Optimized2_out1_1        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL NCO_HDL_Optimized2_out1_2        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product3_cast                    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Product3_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Product3_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Product3_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Product3_out1_1                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Add2_out1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion_out1        : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Subtract_bypass_reg              : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Data_Type_Conversion_out1_1      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL circular_buffer_delay1_out1      : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL circular_buffer_delay1_out1_1    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL circular_buffer_delay1_out1_2    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL echo_gain_unsigned               : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL echo_gain_1                      : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL echo_gain_2                      : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL echo_gain_3                      : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL Product1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Product1_mul_temp                : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Product1_cast_1                  : signed(39 DOWNTO 0);  -- sfix40_En38
  SIGNAL Product1_out1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL input_signal_signed              : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product1_out1_1                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL input_signal_1                   : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL input_signal_2                   : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL offset1_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL slope1_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL slope1_out1_1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL sin2_en1_out1                    : std_logic;
  SIGNAL NCO_HDL_Optimized1_out1          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_HDL_Optimized1_out1_1        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL NCO_HDL_Optimized1_out1_2        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product2_cast                    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Product2_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En14
  SIGNAL Product2_cast_1                  : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Product2_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Product2_out1_1                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Add3_out1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion1_out1       : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Subtract1_bypass_reg             : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Data_Type_Conversion1_out1_1     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL circular_buffer_delay_out1       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL circular_buffer_delay_out1_1     : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL circular_buffer_delay_out1_2     : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product_cast                     : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Product_mul_temp                 : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Product_cast_1                   : signed(39 DOWNTO 0);  -- sfix40_En38
  SIGNAL Product_out1                     : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product_out1_1                   : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Add1_add_cast                    : signed(25 DOWNTO 0);  -- sfix26_En23
  SIGNAL Add1_add_cast_1                  : signed(25 DOWNTO 0);  -- sfix26_En23
  SIGNAL Add1_add_temp                    : signed(25 DOWNTO 0);  -- sfix26_En23
  SIGNAL Add1_add_cast_2                  : signed(25 DOWNTO 0);  -- sfix26_En23
  SIGNAL Add1_add_temp_1                  : signed(25 DOWNTO 0);  -- sfix26_En23
  SIGNAL Add1_out1                        : signed(23 DOWNTO 0);  -- sfix24_En23

BEGIN
  u_NCO_HDL_Optimized2 : NCO_HDL_Optimized2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              inc => delay_samples2,  -- ufix14
              validIn => sin1_en_out1,
              sine => NCO_HDL_Optimized2_out1  -- sfix16_En14
              );

  u_circular_buffer_delay1 : circular_buffer_delay1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              signal_in => input_signal,  -- sfix24_En23
              delay => std_logic_vector(Data_Type_Conversion_out1_1),  -- ufix14
              signal_out => circular_buffer_delay1_out1  -- sfix24_En23
              );

  u_NCO_HDL_Optimized1 : NCO_HDL_Optimized1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              inc => delay_samples,  -- ufix14
              validIn => sin2_en1_out1,
              sine => NCO_HDL_Optimized1_out1  -- sfix16_En14
              );

  u_circular_buffer_delay : circular_buffer_delay
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              signal_in => input_signal,  -- sfix24_En23
              delay => std_logic_vector(Data_Type_Conversion1_out1_1),  -- ufix14
              signal_out => circular_buffer_delay_out1  -- sfix24_En23
              );

  offset_out1 <= to_unsigned(16#04B0#, 16);

  slope_out1 <= to_unsigned(16#00F0#, 16);

  HwModeRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      slope_out1_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        slope_out1_1 <= slope_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  sin1_en_out1 <= '1';

  NCO_HDL_Optimized2_out1_1 <= signed(NCO_HDL_Optimized2_out1);

  HwModeRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      NCO_HDL_Optimized2_out1_2 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        NCO_HDL_Optimized2_out1_2 <= NCO_HDL_Optimized2_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;


  Product3_cast <= signed(resize(slope_out1_1, 17));
  Product3_mul_temp <= Product3_cast * NCO_HDL_Optimized2_out1_2;
  Product3_cast_1 <= Product3_mul_temp(31 DOWNTO 0);
  Product3_out1 <= unsigned(Product3_cast_1(29 DOWNTO 14));

  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product3_out1_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product3_out1_1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Add2_out1 <= offset_out1 + Product3_out1_1;

  Data_Type_Conversion_out1 <= Add2_out1(13 DOWNTO 0);

  Subtract_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract_bypass_reg <= to_unsigned(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Subtract_bypass_reg <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Subtract_bypass_process;

  
  Data_Type_Conversion_out1_1 <= Data_Type_Conversion_out1 WHEN enb_1_2048_1 = '1' ELSE
      Subtract_bypass_reg;

  circular_buffer_delay1_out1_1 <= signed(circular_buffer_delay1_out1);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      circular_buffer_delay1_out1_2 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        circular_buffer_delay1_out1_2 <= circular_buffer_delay1_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  echo_gain_unsigned <= unsigned(echo_gain);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      echo_gain_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_0 = '1' THEN
        echo_gain_1 <= echo_gain_unsigned;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  echo_gain_2 <= echo_gain_1;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      echo_gain_3 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        echo_gain_3 <= echo_gain_2;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Product1_cast <= signed(resize(echo_gain_3, 17));
  Product1_mul_temp <= circular_buffer_delay1_out1_2 * Product1_cast;
  Product1_cast_1 <= Product1_mul_temp(39 DOWNTO 0);
  Product1_out1 <= Product1_cast_1(38 DOWNTO 15);

  input_signal_signed <= signed(input_signal);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_signal_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_0 = '1' THEN
        input_signal_1 <= input_signal_signed;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  input_signal_2 <= input_signal_1;

  offset1_out1 <= to_unsigned(16#04B0#, 16);

  slope1_out1 <= to_unsigned(16#00F0#, 16);

  HwModeRegister6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      slope1_out1_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        slope1_out1_1 <= slope1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;


  sin2_en1_out1 <= '1';

  NCO_HDL_Optimized1_out1_1 <= signed(NCO_HDL_Optimized1_out1);

  HwModeRegister7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      NCO_HDL_Optimized1_out1_2 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        NCO_HDL_Optimized1_out1_2 <= NCO_HDL_Optimized1_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister7_process;


  Product2_cast <= signed(resize(slope1_out1_1, 17));
  Product2_mul_temp <= Product2_cast * NCO_HDL_Optimized1_out1_2;
  Product2_cast_1 <= Product2_mul_temp(31 DOWNTO 0);
  Product2_out1 <= unsigned(Product2_cast_1(29 DOWNTO 14));

  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_out1_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product2_out1_1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Add3_out1 <= offset1_out1 + Product2_out1_1;

  Data_Type_Conversion1_out1 <= Add3_out1(13 DOWNTO 0);

  Subtract1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subtract1_bypass_reg <= to_unsigned(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Subtract1_bypass_reg <= Data_Type_Conversion1_out1;
      END IF;
    END IF;
  END PROCESS Subtract1_bypass_process;

  
  Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1 WHEN enb_1_2048_1 = '1' ELSE
      Subtract1_bypass_reg;

  circular_buffer_delay_out1_1 <= signed(circular_buffer_delay_out1);

  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      circular_buffer_delay_out1_2 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        circular_buffer_delay_out1_2 <= circular_buffer_delay_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  Product_cast <= signed(resize(echo_gain_3, 17));
  Product_mul_temp <= circular_buffer_delay_out1_2 * Product_cast;
  Product_cast_1 <= Product_mul_temp(39 DOWNTO 0);
  Product_out1 <= Product_cast_1(38 DOWNTO 15);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Add1_add_cast <= resize(Product1_out1_1, 26);
  Add1_add_cast_1 <= resize(input_signal_2, 26);
  Add1_add_temp <= Add1_add_cast + Add1_add_cast_1;
  Add1_add_cast_2 <= resize(Product_out1_1, 26);
  Add1_add_temp_1 <= Add1_add_temp + Add1_add_cast_2;
  Add1_out1 <= Add1_add_temp_1(23 DOWNTO 0);

  output_signal <= std_logic_vector(Add1_out1);

END rtl;

