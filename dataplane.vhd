-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\chorus_try10sin\dataplane.vhd
-- Created: 2021-04-19 22:46:32
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.01725e-08
-- Target subsystem base rate: 1.01725e-08
-- Explicit user oversample request: 2048x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- output_signal                 ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dataplane
-- Source Path: chorus_try10sin/dataplane
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY dataplane IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        input_signal                      :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        delay_samples                     :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        echo_gain                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En15
        enable                            :   IN    std_logic;
        volume                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En15
        delay_samples2                    :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        ce_out                            :   OUT   std_logic;
        output_signal                     :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
        );
END dataplane;


ARCHITECTURE rtl OF dataplane IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT dataplane_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_2048_0                    :   OUT   std_logic;
          enb_1_2048_1                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT double_chorus
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          input_signal                    :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          delay_samples                   :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          echo_gain                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En15
          delay_samples2                  :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          output_signal                   :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En23
          );
  END COMPONENT;

  -- Component Configuration Statements
--   FOR ALL : dataplane_tc
--     USE ENTITY work.dataplane_tc(rtl);

--   FOR ALL : double_chorus
--     USE ENTITY work.double_chorus(rtl);

  -- Signals
  SIGNAL enb_1_2048_1                     : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2048_0                     : std_logic;
  SIGNAL input_signal_signed              : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL enable_1                         : std_logic;
  SIGNAL enable_2                         : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL input_signal_1                   : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL input_signal_2                   : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL double_chorus_out1               : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL double_chorus_out1_signed        : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Switch_out1                      : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Switch_out1_1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL volume_unsigned                  : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL volume_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL volume_2                         : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL volume_3                         : unsigned(15 DOWNTO 0);  -- ufix16_En15
  SIGNAL Product1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Product1_mul_temp                : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Product1_cast_1                  : signed(39 DOWNTO 0);  -- sfix40_En38
  SIGNAL Product1_out1                    : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product1_out1_1                  : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL t_bypass_reg                     : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL Product1_out1_2                  : signed(23 DOWNTO 0);  -- sfix24_En23

BEGIN
  u_dataplane_tc : dataplane_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1
              );

  u_double_chorus : double_chorus
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              input_signal => input_signal,  -- sfix24_En23
              delay_samples => delay_samples,  -- ufix14
              echo_gain => echo_gain,  -- ufix16_En15
              delay_samples2 => delay_samples2,  -- ufix14
              output_signal => double_chorus_out1  -- sfix24_En23
              );

  input_signal_signed <= signed(input_signal);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      enable_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_0 = '1' THEN
        enable_1 <= enable;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  enable_2 <= enable_1;

  
  switch_compare_1 <= '1' WHEN enable_2 > '0' ELSE
      '0';

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_signal_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_0 = '1' THEN
        input_signal_1 <= input_signal_signed;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  input_signal_2 <= input_signal_1;

  double_chorus_out1_signed <= signed(double_chorus_out1);

  
  Switch_out1 <= input_signal_2 WHEN switch_compare_1 = '0' ELSE
      double_chorus_out1_signed;

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Switch_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Switch_out1_1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  volume_unsigned <= unsigned(volume);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      volume_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_0 = '1' THEN
        volume_1 <= volume_unsigned;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  volume_2 <= volume_1;

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      volume_3 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        volume_3 <= volume_2;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product1_cast <= signed(resize(volume_3, 17));
  Product1_mul_temp <= Switch_out1_1 * Product1_cast;
  Product1_cast_1 <= Product1_mul_temp(39 DOWNTO 0);
  Product1_out1 <= Product1_cast_1(38 DOWNTO 15);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_out1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  t_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t_bypass_reg <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        t_bypass_reg <= Product1_out1_1;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Product1_out1_2 <= Product1_out1_1 WHEN enb_1_2048_1 = '1' ELSE
      t_bypass_reg;

  output_signal <= std_logic_vector(Product1_out1_2);

  ce_out <= enb_1_2048_1;

END rtl;

